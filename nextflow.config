/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     aarandad / ampseq_workflow Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

params {

    // mandatory arguments
    target          = null
    readDIR         = null      // specify --readDIR in terminal
                                // or overwrite here
    outDIR          = "results" // can overwite with --outDIR
    sequencer       = null // sequencer used
    workflow        = "complete"
    QC_only         = false       // Specify QC only workflows
    cutadapt_minlen = 100       // Discard trimmed reads shorter than N
    refseq_fasta    = null
    masked_fasta 	= null
    genome          = "v1"
    pools           = null
    target          = null
    parallel        = true
    amplicon_info   = null
    // optional, workflow specific args
    denoised_asvs       = null   // set if running `postproc_only` workflow

    // cutadapt
    allowed_errors  = 0

    // Denoising step //
    alignment_threshold = 60

    // trf
    mask_tandem_repeats = true
    trf_min_score       = 25
    trf_max_period      = 3

    // homopolymers
    mask_homopolymers = true
    homopolymer_threshold = 5   // Longest allowable homopolymer in reference sequence

    // dada
    dada2_pool      = "pseudo"  // options: false, pseudo, true
    band_size       = 16 // default
    omega_a         = 1e-120
    maxEE           = 3
    just_concatenate = true

    // config options
    custom_config_base = "conf"

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory      = '32.GB'
    max_cpus        = '8'
    max_time        = '240.h'
}

// contains resource configurations
includeConfig 'conf/base.config'
includeConfig 'conf/panel.config'

// Uncomment if adding a site profile
// try {
//     includeConfig "${params.custom_config_base}/custom.config"
// } catch (Exception e) {
//     System.err.println("WARNING: Could not load custom config profile: ${params.custom_config_base}/custom.config")
// }

profiles {
	conda {
		conda.enabled           = true
        docker.enabled          = false
        apptainer.enabled       = false
	}
	mamba {
		conda.enabled       = true
		conda.useMamba      = true
        docker.enabled      = false
        apptainer.enabled   = false
	}
    docker {
        conda.enabled           = false
        docker.enabled          = true
        docker.userEmulation    = true
        apptainer.enabled       = false
        process.container       = "eppicenter/mad4hatter:latest"
    }
    apptainer {
        conda.enabled           = false
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        docker.enabled          = false
        process.container       = "file://mad4hatter_latest.sif"
    }
    sge {
        process {
            executor        = "sge"
            scratch         = true
            stageInMode     = "copy"
            stageOutMode    = "move"
            errorStrategy   = "retry"
            clusterOptions  = '-l scratch=100G -S /bin/bash -o job.log -e job.err'
        }
    }
    slurm {
        process {
            executor        = 'slurm'
            scratch         = true
            stageInMode     = "copy"
            stageOutMode    = "move"
            errorStrategy   = "retry"
        }
    }
}

manifest {
    name            = 'eppicenter/MAD4HATTER'
    homePage        = 'https://eppicenter.github.io/mad4hatter/'
    description     = 'An open-source analysis pipeline to detect multiplexed amplicons'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.6'
    version         = 'v0.2.1'
    defaultBranch   = 'v0.2.1'
}

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
